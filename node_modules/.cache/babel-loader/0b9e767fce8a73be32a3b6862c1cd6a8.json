{"ast":null,"code":"import{normalizeCategory}from'./common';function getCategory(k,taxonomy){if(k===-1){return'';}return taxonomy[k]['name'];}function toFinalForm(data){var headers=data.table.columns;var colidx={};for(var i=0;i<headers.length;i++){colidx[headers[i]]=i;}var features=[];data.table.data.forEach(function(row,i){var feature={'type':'Feature','properties':{'idx':i,'company':row[colidx['company']],'city':data.cities[row[colidx['city']]],'tax1':getCategory(row[colidx['tax1']],data.taxonomy),'tax2':getCategory(row[colidx['tax2']],data.taxonomy),'tax3':getCategory(row[colidx['tax3']],data.taxonomy),'website':row[colidx['website']],'notes':row[colidx['notes']]},'geometry':{'type':'Point','coordinates':[row[colidx['lng']],row[colidx['lat']]]}};// canonicalize categories for use as labels\n['tax1','tax2','tax3'].forEach(function(label){var newprop=\"\".concat(label,\"sanitized\");var category=feature.properties[label];feature.properties[newprop]=normalizeCategory(category);});features.push(feature);});return{geojson:{type:'FeatureCollection',features:features},taxonomy:data.taxonomy};}export function fetchMapData(mapId){var url=process.env.PUBLIC_URL+\"/data/\".concat(mapId,\".json\");return fetch(url).then(function(r){return r.json();}).then(toFinalForm);}","map":{"version":3,"sources":["/Users/laurenjanicke/aes-sustainability/src/data-loader.js"],"names":["normalizeCategory","getCategory","k","taxonomy","toFinalForm","data","headers","table","columns","colidx","i","length","features","forEach","row","feature","cities","label","newprop","category","properties","push","geojson","type","fetchMapData","mapId","url","process","env","PUBLIC_URL","fetch","then","r","json"],"mappings":"AAAA,OAASA,iBAAT,KAAkC,UAAlC,CAEA,QAASC,CAAAA,WAAT,CAAqBC,CAArB,CAAwBC,QAAxB,CAAkC,CAChC,GAAID,CAAC,GAAK,CAAC,CAAX,CAAc,CACZ,MAAO,EAAP,CACD,CACD,MAAOC,CAAAA,QAAQ,CAACD,CAAD,CAAR,CAAY,MAAZ,CAAP,CACD,CAED,QAASE,CAAAA,WAAT,CAAqBC,IAArB,CAA2B,CACzB,GAAIC,CAAAA,OAAO,CAAGD,IAAI,CAACE,KAAL,CAAWC,OAAzB,CACA,GAAMC,CAAAA,MAAM,CAAG,EAAf,CACA,IAAK,GAAIC,CAAAA,CAAC,CAAG,CAAb,CAAgBA,CAAC,CAAGJ,OAAO,CAACK,MAA5B,CAAoCD,CAAC,EAArC,CAAyC,CACvCD,MAAM,CAACH,OAAO,CAACI,CAAD,CAAR,CAAN,CAAqBA,CAArB,CACD,CACD,GAAME,CAAAA,QAAQ,CAAG,EAAjB,CACAP,IAAI,CAACE,KAAL,CAAWF,IAAX,CAAgBQ,OAAhB,CAAwB,SAACC,GAAD,CAAMJ,CAAN,CAAY,CAClC,GAAIK,CAAAA,OAAO,CAAG,CACZ,OAAQ,SADI,CAEZ,aAAc,CACZ,MAAOL,CADK,CAEZ,UAAWI,GAAG,CAACL,MAAM,CAAC,SAAD,CAAP,CAFF,CAGZ,OAAQJ,IAAI,CAACW,MAAL,CAAYF,GAAG,CAACL,MAAM,CAAC,MAAD,CAAP,CAAf,CAHI,CAIZ,OAAQR,WAAW,CAACa,GAAG,CAACL,MAAM,CAAC,MAAD,CAAP,CAAJ,CAAsBJ,IAAI,CAACF,QAA3B,CAJP,CAKZ,OAAQF,WAAW,CAACa,GAAG,CAACL,MAAM,CAAC,MAAD,CAAP,CAAJ,CAAsBJ,IAAI,CAACF,QAA3B,CALP,CAMZ,OAAQF,WAAW,CAACa,GAAG,CAACL,MAAM,CAAC,MAAD,CAAP,CAAJ,CAAsBJ,IAAI,CAACF,QAA3B,CANP,CAOZ,UAAWW,GAAG,CAACL,MAAM,CAAC,SAAD,CAAP,CAPF,CAQZ,QAASK,GAAG,CAACL,MAAM,CAAC,OAAD,CAAP,CARA,CAFF,CAYZ,WAAY,CACV,OAAQ,OADE,CAEV,cAAe,CAACK,GAAG,CAACL,MAAM,CAAC,KAAD,CAAP,CAAJ,CAAqBK,GAAG,CAACL,MAAM,CAAC,KAAD,CAAP,CAAxB,CAFL,CAZA,CAAd,CAiBA;AACA,CAAC,MAAD,CAAS,MAAT,CAAiB,MAAjB,EAAyBI,OAAzB,CAAiC,SAAAI,KAAK,CAAI,CACxC,GAAMC,CAAAA,OAAO,WAAMD,KAAN,aAAb,CACA,GAAIE,CAAAA,QAAQ,CAAGJ,OAAO,CAACK,UAAR,CAAmBH,KAAnB,CAAf,CACAF,OAAO,CAACK,UAAR,CAAmBF,OAAnB,EAA8BlB,iBAAiB,CAACmB,QAAD,CAA/C,CACD,CAJD,EAKAP,QAAQ,CAACS,IAAT,CAAcN,OAAd,EACD,CAzBD,EA0BA,MAAO,CACLO,OAAO,CAAE,CACPC,IAAI,CAAE,mBADC,CAEPX,QAAQ,CAAEA,QAFH,CADJ,CAKLT,QAAQ,CAAEE,IAAI,CAACF,QALV,CAAP,CAOD,CAED,MAAO,SAASqB,CAAAA,YAAT,CAAsBC,KAAtB,CAA6B,CAClC,GAAIC,CAAAA,GAAG,CAAGC,OAAO,CAACC,GAAR,CAAYC,UAAZ,iBAAkCJ,KAAlC,SAAV,CACA,MAAOK,CAAAA,KAAK,CAACJ,GAAD,CAAL,CAAWK,IAAX,CAAgB,SAAAC,CAAC,QAAIA,CAAAA,CAAC,CAACC,IAAF,EAAJ,EAAjB,EAA+BF,IAA/B,CAAoC3B,WAApC,CAAP,CACD","sourcesContent":["import { normalizeCategory } from './common';\n\nfunction getCategory(k, taxonomy) {\n  if (k === -1) {\n    return '';\n  }\n  return taxonomy[k]['name'];\n}\n\nfunction toFinalForm(data) {\n  let headers = data.table.columns;\n  const colidx = {};\n  for (var i = 0; i < headers.length; i++) {\n    colidx[headers[i]] = i;\n  }\n  const features = [];\n  data.table.data.forEach((row, i) => {\n    let feature = {\n      'type': 'Feature',\n      'properties': {\n        'idx': i,\n        'company': row[colidx['company']],\n        'city': data.cities[row[colidx['city']]],\n        'tax1': getCategory(row[colidx['tax1']], data.taxonomy),\n        'tax2': getCategory(row[colidx['tax2']], data.taxonomy),\n        'tax3': getCategory(row[colidx['tax3']], data.taxonomy),\n        'website': row[colidx['website']],\n        'notes': row[colidx['notes']],\n      },\n      'geometry': {\n        'type': 'Point',\n        'coordinates': [row[colidx['lng']], row[colidx['lat']]],\n      },\n    };\n    // canonicalize categories for use as labels\n    ['tax1', 'tax2', 'tax3'].forEach(label => {\n      const newprop = `${label}sanitized`;\n      let category = feature.properties[label];\n      feature.properties[newprop] = normalizeCategory(category);\n    });\n    features.push(feature);\n  });\n  return {\n    geojson: {\n      type: 'FeatureCollection',\n      features: features,\n    },\n    taxonomy: data.taxonomy,\n  }\n}\n\nexport function fetchMapData(mapId) {\n  let url = process.env.PUBLIC_URL + `/data/${mapId}.json`;\n  return fetch(url).then(r => r.json()).then(toFinalForm);\n}\n"]},"metadata":{},"sourceType":"module"}