{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"/Users/laurenjanicke/aes-sustainability/src/App.js\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport mapboxgl from 'mapbox-gl';\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LogoOverlay from './LogoOverlay';\nimport IconButton from '@material-ui/core/Button';\nimport { Home } from '@material-ui/icons';\nimport Omnibox from './Omnibox';\nimport { getAllCategories } from './common';\nimport CONFIG from './config.json';\nimport { fetchMapData } from './data-loader';\nimport { THEME } from './Theme';\nimport insightLogo from './img/insight-white.png';\nimport './App.css';\nconst COMPANIES_SOURCE = 'companies';\nconst MAPS = CONFIG['maps'];\nconst POINT_LAYER = 'energy-companies-point-layer'; // = process.env.REACT_APP_MAPBOX_API_TOKEN;\n// mapboxgl.accessToken\n\nmapboxgl.accessToken = 'pk.eyJ1IjoidG90b3JvLWRha2UiLCJhIjoiY2tiNzJuZmQ3MDFudDJxa2N1ZG91YzBzciJ9.5qJpYzti2W7avnuM9rCiKA';\n\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3'].map(k => props[k]).filter(s => s).join(\" | \");\n  return `\n    <div class=\"popup\" style = \"color: 626262\">\n      <h3 class=\"company-name\">\n        <a href=${props['website']} style=\"color: 02346d\" ALINK=\"#79ddf2\" target=\"blank\">${props['company']}</a>\n      </h3>\n      \n      City: <span class=\"city-info\">${props['city']}</span><br />\n\n    </div>`;\n}\n\nfunction clearPopups() {\n  var popUps = document.getElementsByClassName('mapboxgl-popup'); // Check if there is already a popup on the map and if so, remove it\n  // This prevents multiple popups in the case of overlapping circles\n\n  if (popUps[0]) popUps[0].remove();\n}\n\nfunction displayPopup(map, feature) {\n  const coordinates = feature.geometry.coordinates.slice();\n  clearPopups();\n  new mapboxgl.Popup({}).setLngLat(coordinates).setHTML(getPopupContent(feature.properties)).setMaxWidth(\"600px\").addTo(map);\n}\n\nfunction populateMapData(map, mapId, mapData) {\n  map.setCenter(MAPS[mapId].center);\n  map.setZoom(1);\n  mapData.then(data => {\n    map.addSource(COMPANIES_SOURCE, {\n      type: 'geojson',\n      data: data['geojson']\n    });\n    map.addLayer({\n      id: POINT_LAYER,\n      type: 'circle',\n      source: COMPANIES_SOURCE,\n      paint: {\n        // make circles larger as the user zooms\n        'circle-radius': {\n          stops: [[7, 5], [14, 12], [20, 50]]\n        },\n        'circle-opacity': 0.85,\n        // color circles by primary category\n        'circle-color': '#79DDF2',\n        'circle-stroke-color': '#000',\n        'circle-stroke-width': 0.4\n      }\n    });\n    map.on('mouseenter', POINT_LAYER, e => {\n      map.getCanvas().style.cursor = 'pointer';\n    });\n    map.on('mouseleave', POINT_LAYER, () => {\n      map.getCanvas().style.cursor = '';\n    });\n    map.on('click', POINT_LAYER, e => displayPopup(map, e.features[0]));\n    map.flyTo({\n      center: MAPS[mapId].flyTo,\n      zoom: MAPS[mapId].flyToZoom || 8,\n      speed: 0.5\n    });\n  });\n}\n\nconst getUrlFragment = () => window.location.hash.replace('#', '');\n\nfunction useUrlFragment(fragment, callback) {\n  _s();\n\n  useEffect(() => {\n    window.location.hash = '#' + fragment;\n\n    const handleHashChange = () => {\n      callback(getUrlFragment());\n    };\n\n    window.addEventListener('hashchange', handleHashChange);\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    };\n  });\n}\n\n_s(useUrlFragment, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\nfunction getInitialMapId() {\n  let initialMapId = getUrlFragment();\n\n  if (MAPS.hasOwnProperty(initialMapId)) {\n    return initialMapId;\n  }\n\n  return CONFIG['defaultMapId'];\n}\n\nconst useStyles = makeStyles(theme => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  mainContent: {\n    flexGrow: 1,\n    position: 'relative'\n  },\n  mapContainer: {\n    height: '100vh',\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    backgroundColor: '#333'\n  },\n  mapOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    padding: 0,\n    pointerEvents: 'none'\n  },\n  mapOverlayInner: {\n    display: 'block',\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0\n  },\n  mainControlOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row'\n  },\n  insightLogoContainer: {\n    padding: 8\n  },\n  titleAndSearch: {\n    padding: '4px 8px'\n  },\n  mapTitle: {\n    color: '#fff',\n    padding: '4px 0px',\n    marginBottom: 4\n  },\n  resetViewButton: {\n    position: 'absolute',\n    bottom: 73,\n    right: 4.5,\n    minWidth: 30,\n    maxWidth: 30,\n    height: 31\n  }\n}));\nexport default function App() {\n  _s2();\n\n  const classes = useStyles();\n  const [thisMap, setThisMap] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(getInitialMapId());\n  const [taxonomy, setTaxonomy] = useState([]);\n  const [companiesGeojson, setCompaniesGeojson] = useState({});\n  const [selectedCategories, setSelectedCategories] = useState(new Set([]));\n  const [mobileDrawerOpen, setMobileDrawerOpen] = useState(false);\n\n  function handleSelectAllCategories(txnomy) {\n    // takes argument instead of using taxonomy directly because taxonomy\n    // state update can lag behind\n    setSelectedCategories(getAllCategories(txnomy));\n  }\n\n  function handleSelectCompany(e) {\n    const selectedCompany = companiesGeojson.features[e.idx];\n    displayPopup(thisMap, selectedCompany);\n    thisMap.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14\n    });\n  }\n\n  function handleSelectMap(mapId) {\n    if (mapId !== selectedMapId) {\n      clearPopups();\n      thisMap.removeLayer(POINT_LAYER);\n      thisMap.removeSource(COMPANIES_SOURCE);\n      setSelectedMapId(mapId);\n      setMobileDrawerOpen(false);\n      let mapData = fetchMapData(mapId);\n      mapData.then(setUpMap);\n      populateMapData(thisMap, mapId, mapData);\n      handleSelectAllCategories(taxonomy);\n    }\n  }\n\n  function handleReset() {\n    // called when reset button is clicked\n    thisMap.flyTo({\n      center: MAPS[selectedMapId].flyTo,\n      zoom: MAPS[selectedMapId].flyToZoom || 8\n    });\n  }\n\n  function setUpMap(data) {\n    setTaxonomy(data['taxonomy']);\n    setCompaniesGeojson(data['geojson']); // initially select all categories\n\n    handleSelectAllCategories(data['taxonomy']);\n  }\n\n  function initMap() {\n    let map = new mapboxgl.Map({\n      container: \"map-container\",\n      style: 'mapbox://styles/mapbox/dark-v10',\n      attributionControl: false,\n      center: MAPS[selectedMapId].center,\n      zoom: 1,\n      minZoom: 1\n    });\n    let mapData = fetchMapData(selectedMapId);\n    mapData.then(setUpMap);\n    map.on('load', () => {\n      map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n      populateMapData(map, selectedMapId, mapData);\n    });\n    setThisMap(map);\n  }\n\n  useEffect(() => {\n    if (!thisMap) {\n      initMap();\n    }\n\n    if (thisMap) {\n      if (thisMap.getLayer(POINT_LAYER)) {\n        var filters = [\"any\"]; // If ANY of the 3 taxonomies for a company are selected, it should be\n        // displayed on the map.\n\n        [1, 2, 3].forEach(i => {\n          var filter = [\"in\", `tax${i}sanitized`];\n          selectedCategories.forEach(category => filter.push(category));\n          filters.push(filter);\n        });\n        thisMap.setFilter(POINT_LAYER, filters);\n      }\n    }\n  });\n  useUrlFragment(selectedMapId, urlFragment => {\n    if (MAPS.hasOwnProperty(urlFragment)) {\n      handleSelectMap(urlFragment);\n    }\n  });\n  return /*#__PURE__*/_jsxDEV(ThemeProvider, {\n    theme: THEME,\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.root,\n      children: /*#__PURE__*/_jsxDEV(\"main\", {\n        className: classes.mainContent,\n        children: [/*#__PURE__*/_jsxDEV(\"div\", {\n          id: \"map-container\",\n          className: classes.mapContainer\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 295,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.resetViewButton,\n          children: /*#__PURE__*/_jsxDEV(IconButton, {\n            variant: \"contained\",\n            color: \"white\",\n            className: classes.resetViewButton,\n            \"aria-label\": \"reset view\",\n            onClick: () => {\n              handleReset();\n            },\n            children: /*#__PURE__*/_jsxDEV(Home, {}, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 298,\n              columnNumber: 15\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 297,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 296,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          className: classes.mapOverlay,\n          children: /*#__PURE__*/_jsxDEV(\"div\", {\n            className: classes.mapOverlayInner,\n            children: [/*#__PURE__*/_jsxDEV(\"div\", {\n              className: classes.mainControlOverlay,\n              children: [/*#__PURE__*/_jsxDEV(Hidden, {\n                smDown: true,\n                implementation: \"css\",\n                children: /*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.insightLogoContainer,\n                  children: /*#__PURE__*/_jsxDEV(\"img\", {\n                    src: insightLogo,\n                    alt: \"aes insight logo\",\n                    height: \"80\"\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 306,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 305,\n                  columnNumber: 19\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 304,\n                columnNumber: 17\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: classes.titleAndSearch,\n                children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                  className: classes.mapTitle,\n                  children: /*#__PURE__*/_jsxDEV(Typography, {\n                    variant: \"h1\",\n                    children: MAPS[selectedMapId].title\n                  }, void 0, false, {\n                    fileName: _jsxFileName,\n                    lineNumber: 311,\n                    columnNumber: 21\n                  }, this)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 310,\n                  columnNumber: 19\n                }, this), /*#__PURE__*/_jsxDEV(Omnibox, {\n                  companies: companiesGeojson.features,\n                  onSelectCompany: handleSelectCompany,\n                  onOpenMobileDrawer: () => setMobileDrawerOpen(true)\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 313,\n                  columnNumber: 19\n                }, this)]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 309,\n                columnNumber: 17\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 303,\n              columnNumber: 15\n            }, this), /*#__PURE__*/_jsxDEV(LogoOverlay, {\n              selectedMapId: selectedMapId\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 319,\n              columnNumber: 15\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 302,\n            columnNumber: 13\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 301,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 294,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 293,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 292,\n    columnNumber: 5\n  }, this);\n}\n\n_s2(App, \"SG4+6VT4+tUYjPttB6CmxbFqAzg=\", false, function () {\n  return [useStyles, useUrlFragment];\n});\n\n_c = App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/laurenjanicke/aes-sustainability/src/App.js"],"names":["mapboxgl","React","useState","useEffect","ThemeProvider","Hidden","Typography","makeStyles","LogoOverlay","IconButton","Home","Omnibox","getAllCategories","CONFIG","fetchMapData","THEME","insightLogo","COMPANIES_SOURCE","MAPS","POINT_LAYER","accessToken","getPopupContent","props","categoryInfo","map","k","filter","s","join","clearPopups","popUps","document","getElementsByClassName","remove","displayPopup","feature","coordinates","geometry","slice","Popup","setLngLat","setHTML","properties","setMaxWidth","addTo","populateMapData","mapId","mapData","setCenter","center","setZoom","then","data","addSource","type","addLayer","id","source","paint","stops","on","e","getCanvas","style","cursor","features","flyTo","zoom","flyToZoom","speed","getUrlFragment","window","location","hash","replace","useUrlFragment","fragment","callback","handleHashChange","addEventListener","removeEventListener","getInitialMapId","initialMapId","hasOwnProperty","useStyles","theme","root","display","flexDirection","mainContent","flexGrow","position","mapContainer","height","top","right","left","bottom","backgroundColor","mapOverlay","padding","pointerEvents","mapOverlayInner","width","margin","mainControlOverlay","insightLogoContainer","titleAndSearch","mapTitle","color","marginBottom","resetViewButton","minWidth","maxWidth","App","classes","thisMap","setThisMap","selectedMapId","setSelectedMapId","taxonomy","setTaxonomy","companiesGeojson","setCompaniesGeojson","selectedCategories","setSelectedCategories","Set","mobileDrawerOpen","setMobileDrawerOpen","handleSelectAllCategories","txnomy","handleSelectCompany","selectedCompany","idx","handleSelectMap","removeLayer","removeSource","setUpMap","handleReset","initMap","Map","container","attributionControl","minZoom","addControl","FullscreenControl","NavigationControl","getLayer","filters","forEach","i","category","push","setFilter","urlFragment","title"],"mappings":"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","sourcesContent":["import mapboxgl from 'mapbox-gl';\nimport React, { useState, useEffect } from 'react';\nimport { ThemeProvider } from '@material-ui/core/styles';\nimport Hidden from '@material-ui/core/Hidden';\nimport Typography from '@material-ui/core/Typography';\nimport { makeStyles } from '@material-ui/core/styles';\nimport LogoOverlay from './LogoOverlay';\nimport IconButton from '@material-ui/core/Button';\nimport { Home } from '@material-ui/icons';  \nimport Omnibox from './Omnibox';\nimport { getAllCategories } from './common';\nimport CONFIG from './config.json';\nimport { fetchMapData } from './data-loader';\nimport { THEME } from './Theme';\nimport insightLogo from './img/insight-white.png';\nimport './App.css';\n\nconst COMPANIES_SOURCE = 'companies';\nconst MAPS = CONFIG['maps'];\nconst POINT_LAYER = 'energy-companies-point-layer';\n\n// = process.env.REACT_APP_MAPBOX_API_TOKEN;\n// mapboxgl.accessToken\nmapboxgl.accessToken='pk.eyJ1IjoidG90b3JvLWRha2UiLCJhIjoiY2tiNzJuZmQ3MDFudDJxa2N1ZG91YzBzciJ9.5qJpYzti2W7avnuM9rCiKA'\n\nfunction getPopupContent(props) {\n  const categoryInfo = ['tax1', 'tax2', 'tax3']\n    .map(k => props[k])\n    .filter(s => s).join(\" | \");\n  return `\n    <div class=\"popup\" style = \"color: 626262\">\n      <h3 class=\"company-name\">\n        <a href=${props['website']} style=\"color: 02346d\" ALINK=\"#79ddf2\" target=\"blank\">${props['company']}</a>\n      </h3>\n      \n      City: <span class=\"city-info\">${props['city']}</span><br />\n\n    </div>`;\n}\n\nfunction clearPopups() {\n  var popUps = document.getElementsByClassName('mapboxgl-popup');\n  // Check if there is already a popup on the map and if so, remove it\n  // This prevents multiple popups in the case of overlapping circles\n  if (popUps[0]) popUps[0].remove();\n}\n\nfunction displayPopup(map, feature) {\n  const coordinates = feature.geometry.coordinates.slice();\n  clearPopups();\n  new mapboxgl.Popup({})\n    .setLngLat(coordinates)\n    .setHTML(getPopupContent(feature.properties))\n    .setMaxWidth(\"600px\")\n    .addTo(map);\n}\n\nfunction populateMapData(map, mapId, mapData) {\n  map.setCenter(MAPS[mapId].center);\n  map.setZoom(1);\n\n  mapData.then(data => {\n    map.addSource(COMPANIES_SOURCE, {\n      type: 'geojson',\n      data: data['geojson'],\n    });\n\n    map.addLayer({\n      id: POINT_LAYER,\n      type: 'circle',\n      source: COMPANIES_SOURCE,\n      paint: {\n        // make circles larger as the user zooms\n        'circle-radius': {\n          stops: [[7, 5], [14, 12], [20, 50]]\n        },\n        'circle-opacity': 0.85,\n        // color circles by primary category\n        'circle-color': '#79DDF2',\n        'circle-stroke-color': '#000',\n        'circle-stroke-width': 0.4,\n      }\n    });\n\n    map.on('mouseenter', POINT_LAYER, (e) => {\n      map.getCanvas().style.cursor = 'pointer';\n    });\n\n    map.on('mouseleave', POINT_LAYER, () => {\n      map.getCanvas().style.cursor = '';\n    });\n\n    map.on('click', POINT_LAYER, e => displayPopup(map, e.features[0]));\n\n    map.flyTo({\n      center: MAPS[mapId].flyTo,\n      zoom: MAPS[mapId].flyToZoom || 8,\n      speed: 0.5,\n    });\n  });\n}\n\nconst getUrlFragment = () => window.location.hash.replace('#', '');\n\nfunction useUrlFragment(fragment, callback) {\n  useEffect(() => {\n    window.location.hash = '#' + fragment;\n    const handleHashChange = () => {\n      callback(getUrlFragment());\n    }\n    window.addEventListener('hashchange', handleHashChange);\n    return () => {\n      window.removeEventListener('hashchange', handleHashChange);\n    }\n  });\n}\n\nfunction getInitialMapId() {\n  let initialMapId = getUrlFragment();\n  if (MAPS.hasOwnProperty(initialMapId)) {\n    return initialMapId;\n  }\n  return CONFIG['defaultMapId'];\n}\n\nconst useStyles = makeStyles((theme) => ({\n  root: {\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  mainContent: {\n    flexGrow: 1,\n    position: 'relative',\n  },\n  mapContainer: {\n    height: '100vh',\n    top: 0,\n    right: 0,\n    left: 0,\n    bottom: 0,\n    backgroundColor: '#333',\n  },\n  mapOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    right: 0,\n    bottom: 0,\n    padding: 0,\n    pointerEvents: 'none',\n  },\n  mapOverlayInner: {\n    display: 'block',\n    position: 'relative',\n    height: '100%',\n    width: '100%',\n    margin: 0,\n    padding: 0,\n  },\n  mainControlOverlay: {\n    position: 'absolute',\n    top: 0,\n    left: 0,\n    padding: 0,\n    margin: 0,\n    pointerEvents: 'auto',\n    display: 'flex',\n    flexDirection: 'row',\n  },\n  insightLogoContainer: {\n    padding: 8,\n  },\n  titleAndSearch: {\n    padding: '4px 8px',\n  },\n  mapTitle: {\n    color: '#fff',\n    padding: '4px 0px',\n    marginBottom: 4,\n  },\n  resetViewButton: {\n    position: 'absolute',\n    bottom: 73,\n    right: 4.5,\n    minWidth: 30,\n    maxWidth: 30,\n    height: 31,\n  }\n}));\n\nexport default function App() {\n  const classes = useStyles();\n\n  const [thisMap, setThisMap] = useState(null);\n  const [selectedMapId, setSelectedMapId] = useState(getInitialMapId());\n  const [taxonomy, setTaxonomy] = useState([]);\n  const [companiesGeojson, setCompaniesGeojson] = useState({});\n  const [selectedCategories, setSelectedCategories] = useState(new Set([]));\n  const [mobileDrawerOpen, setMobileDrawerOpen] = useState(false);\n\n  function handleSelectAllCategories(txnomy) {\n    // takes argument instead of using taxonomy directly because taxonomy\n    // state update can lag behind\n    setSelectedCategories(getAllCategories(txnomy));\n  }\n\n  function handleSelectCompany(e) {\n    const selectedCompany = companiesGeojson.features[e.idx];\n    displayPopup(thisMap, selectedCompany);\n    thisMap.flyTo({\n      center: selectedCompany.geometry.coordinates,\n      zoom: 14,\n    });\n  }\n\n  function handleSelectMap(mapId) {\n    if (mapId !== selectedMapId) {\n      clearPopups();\n      thisMap.removeLayer(POINT_LAYER);\n      thisMap.removeSource(COMPANIES_SOURCE);\n      setSelectedMapId(mapId);\n      setMobileDrawerOpen(false);\n      let mapData = fetchMapData(mapId);\n      mapData.then(setUpMap);\n      populateMapData(thisMap, mapId, mapData);\n      handleSelectAllCategories(taxonomy);\n    }\n  }\n\n  function handleReset() {\n    // called when reset button is clicked\n    thisMap.flyTo({\n      center: MAPS[selectedMapId].flyTo,\n      zoom: MAPS[selectedMapId].flyToZoom || 8,\n    });\n  }\n\n  function setUpMap(data) {\n    setTaxonomy(data['taxonomy']);\n    setCompaniesGeojson(data['geojson']);\n    // initially select all categories\n    handleSelectAllCategories(data['taxonomy']);\n  }\n\n  function initMap() {\n    let map = new mapboxgl.Map({\n      container: \"map-container\",\n      style: 'mapbox://styles/mapbox/dark-v10',\n      attributionControl: false,\n      center: MAPS[selectedMapId].center,\n      zoom: 1,\n      minZoom: 1,\n    });\n    let mapData = fetchMapData(selectedMapId);\n    mapData.then(setUpMap);\n\n    map.on('load', () => {\n      map.addControl(new mapboxgl.FullscreenControl(), 'bottom-right');\n      map.addControl(new mapboxgl.NavigationControl(), 'bottom-right');\n      populateMapData(map, selectedMapId, mapData);\n    });\n    setThisMap(map);\n  }\n\n  useEffect(() => {\n    if (!thisMap) {\n      initMap();\n    }\n\n    if (thisMap) {\n      if (thisMap.getLayer(POINT_LAYER)) {\n        var filters = [\"any\"];\n        // If ANY of the 3 taxonomies for a company are selected, it should be\n        // displayed on the map.\n        [1, 2, 3].forEach(i => {\n          var filter = [\"in\", `tax${i}sanitized`];\n          selectedCategories.forEach(category => filter.push(category));\n          filters.push(filter);\n        });\n        thisMap.setFilter(POINT_LAYER, filters);\n      }\n    }\n  });\n\n  useUrlFragment(selectedMapId, urlFragment => {\n    if (MAPS.hasOwnProperty(urlFragment)) {\n      handleSelectMap(urlFragment);\n    }\n  });\n\n  return (\n    <ThemeProvider theme={THEME}>\n      <div className={classes.root}>\n        <main className={classes.mainContent}>\n          <div id=\"map-container\" className={classes.mapContainer} />\n          <div className={classes.resetViewButton} >\n            <IconButton variant=\"contained\" color=\"white\" className={classes.resetViewButton} aria-label=\"reset view\" onClick={() => { handleReset() }} >\n              <Home />\n            </IconButton>\n          </div>\n          <div className={classes.mapOverlay}>\n            <div className={classes.mapOverlayInner}>\n              <div className={classes.mainControlOverlay}>\n                <Hidden smDown implementation=\"css\">\n                  <div className={classes.insightLogoContainer}>\n                    <img src={insightLogo} alt=\"aes insight logo\" height=\"80\" />\n                  </div>\n                </Hidden>\n                <div className={classes.titleAndSearch}>\n                  <div className={classes.mapTitle}>\n                    <Typography variant=\"h1\">{MAPS[selectedMapId].title}</Typography>\n                  </div>\n                  <Omnibox\n                    companies={companiesGeojson.features}\n                    onSelectCompany={handleSelectCompany}\n                    onOpenMobileDrawer={() => setMobileDrawerOpen(true)} />\n                  </div>\n              </div>\n              <LogoOverlay selectedMapId={selectedMapId} />\n            </div>\n          </div>\n        </main>\n      </div>\n    </ThemeProvider>\n  );\n}\n"]},"metadata":{},"sourceType":"module"}